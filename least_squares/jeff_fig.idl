;make fig for jefferys writeup...
print, 'JEFF_FIG.IDL'

if n_elements( iterate) eq 0 then iterate=0

if iterate then goto, iterate

;DEFINE NR DATAPOINTS, NR PARAMS PER MEASUREMENT, NR PARAMS TO FIT
ndata=5		;nr meas 
jdata= 2	;nr quantities measured per meas
nfit= 2		;nr derived coeffs

;DEFINE A GENERAL MULTIPLIER FOR SIGMAS...
sigmult= 4.

sig_array= fltarr( 2, 2, ndata)
;DEFINE THE COVARIANCE MATRICES FOR EACH OF THE 5 DATAPOINTS...
sigt= 0.8
sigy= 0.2
sigyt= 0.4

sig_array[ *,*,0] = diag_matrix( [sigt, sigy])
sig_array[ *,*,4] = diag_matrix( [sigt, sigy])
sig_array[ *,*,2] = diag_matrix( [sigy, sigt])
sig_array[ *,*,1] = diag_matrix( [sigyt, sigyt])
sig_array[ *,*,3] = diag_matrix( [sigyt, sigyt])
sig_array[ 0,1,1] = 0.5* sigyt
sig_array[ 1,0,1] = 0.5* sigyt
sig_array[ 0,1,3] = -0.5* sigyt
sig_array[ 1,0,3] = -0.5* sigyt

;SAVE AN EXPT SO IT IS REPEATABLE...
if n_elements( newexpt) eq 0 then newexpt=0

;IF NEWEXPT THEN ADD NOISE TO THE TRUE VALUES TO OBTAIN THE DATA VALUES...
if newexpt then begin

;DEFINE THE ERRORS IN X AND Y FOR EACH DATAPOINT...
xdsig= fltarr( 2, ndata)
FOR NR=0, NDATA-1 DO BEGIN
randomn_multi, seed, sig_array[ *,*,nr], 1, xx
xdsig[ *, nr]= xx
ENDFOR

;DEFINE THE TRUE (STARRED) DATAPOINT VALUES...
a0star= 0.7
a1star= 1.3
tstar=  findgen(ndata)- (ndata-1)/2.
ystar= a0star + a1star* tstar
xdstar= fltarr( 2, ndata)
ad= [ a0star, a1star]
xstar = fltarr( 2, ndata)
xstar[ 0,*]= tstar
xstar[ 1,*]= ystar
xd= xstar+ xdsig

;CREATE DATA COVARIANCE MATRIX, EQNS 26/27...
sig= fltarr( jdata* ndata, jdata*ndata)
for nr=0, ndata-1 do $
	sig[ jdata*nr: jdata*nr+1, jdata*nr: jdata*nr+1]= sig_array[ *,*,nr]

save, ad, xd, xstar, xdsig, sig, file='jeff_fig.sav'
ENDIF

restore, 'jeff_fig.sav'
td= xd[ 0,*]
yd= xd[ 1,*]

;FROM THE DATA VALUES, FIND AN INITIAL GUESS FOR THE COEFFS...
polyfit, td, yd, 1, coeffs, sigcoeffs, yfit

ad_g= coeffs + [.05, -.07]

;MAKE INITIAL GUESSES FOR THE FITTED t AND Y VALUES
td_g= td  
;yd_g= yfit
yd_g=yd

ITERATE:

;CREATE AND FILL F VECTOR, LHS EQN 23...
fvector= yd_g- ad_g[ 0]- ad_g[ 1]* td_g

;CREATE AND FILL DF/DX MATRIX, EQN 24...
fx_g= fltarr( jdata*ndata, ndata)
FOR NR=0, NDATA-1 DO BEGIN
fx_g[ nr* jdata, nr]= 1.
fx_g[ nr* jdata+ 1, nr]= -ad_g[ 1]
ENDFOR

;CREATE DF/DA MATRIX, EQN 25...
fa_g= findgen( nfit, ndata)
fa_g[ 0,*]= -1.
fa_g[ 1,*]= -td_g

;DEFINE WGT MATRIX, EQN 15...
wgtinv= fx_g ## sig ## transpose( fx_g)
wgt= invert( wgtinv)

;PARTIALLY CONVERT NOTATION TO OUR STANDARD. ALPHA IS THE SAME AS XX.
xx= transpose( fa_g) ## wgt ## fa_g
xxi= invert( xx)

;NOW EVALUATE PHI_G ACCORDING TO EQN 18... 
;FIRST GET DELTA X...
deltay= yd- yd_g
deltat= td- td_g
deltax= fltarr( jdata, ndata)
deltax[ 0,*]= deltay
deltax[ 1,*]= deltat
deltax= reform( deltax, jdata*ndata)
phi_g= fvector+ fx_g ## deltax

;CALCULATE NEW CORRECTIONS...
deltaa_new = - xxi ## transpose( fa_g) ## wgt ## phi_g
deltax_new= - sig ## transpose( fx_g) ## wgt ## ( phi_g + fa_g ## deltaa_new)

;APPLY NEW CORRECTIONS...
ad_g= ad_g+ deltaa_new

tmp= reform( deltax_new, nfit, ndata)
yd_g= yd + tmp[0,*]
td_g= td + tmp[1,*]

print, ' '
;print, transpose(deltaa_new)
;print, tmp
print, ad_g
print, coeffs
;print, true_soln
print, ' '

;save, ad, xd, xstar, xdsig, sig, ad_g, td_g, yd_g, coeffs, file='jeff_fig1.sav'

end
