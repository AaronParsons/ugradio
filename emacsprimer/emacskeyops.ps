%!PS-Adobe-3.0
%%BoundingBox: 18 36 594 756
%%Title: Enscript Output
%%Creator: GNU enscript 1.6.4
%%CreationDate: Wed Jan 13 15:08:22 2010
%%Orientation: Portrait
%%Pages: (atend)
%%DocumentMedia: Letter 612 792 0 () ()
%%DocumentNeededResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset Enscript-Prolog 1.6 4
%
% Procedures.
%

/_S {	% save current state
  /_s save def
} def
/_R {	% restore from saved state
  _s restore
} def

/S {	% showpage protecting gstate
  gsave
  showpage
  grestore
} bind def

/MF {	% fontname newfontname -> -	make a new encoded font
  /newfontname exch def
  /fontname exch def

  /fontdict fontname findfont def
  /newfont fontdict maxlength dict def

  fontdict {
    exch
    dup /FID eq {
      % skip FID pair
      pop pop
    } {
      % copy to the new font dictionary
      exch newfont 3 1 roll put
    } ifelse
  } forall

  newfont /FontName newfontname put

  % insert only valid encoding vectors
  encoding_vector length 256 eq {
    newfont /Encoding encoding_vector put
  } if

  newfontname newfont definefont pop
} def

/MF_PS { % fontname newfontname -> -	make a new font preserving its enc
  /newfontname exch def
  /fontname exch def

  /fontdict fontname findfont def
  /newfont fontdict maxlength dict def

  fontdict {
    exch
    dup /FID eq {
      % skip FID pair
      pop pop
    } {
      % copy to the new font dictionary
      exch newfont 3 1 roll put
    } ifelse
  } forall

  newfont /FontName newfontname put

  newfontname newfont definefont pop
} def

/SF { % fontname width height -> -	set a new font
  /height exch def
  /width exch def

  findfont
  [width 0 0 height 0 0] makefont setfont
} def

/SUF { % fontname width height -> -	set a new user font
  /height exch def
  /width exch def

  /F-gs-user-font MF
  /F-gs-user-font width height SF
} def

/SUF_PS { % fontname width height -> -	set a new user font preserving its enc
  /height exch def
  /width exch def

  /F-gs-user-font MF_PS
  /F-gs-user-font width height SF
} def

/M {moveto} bind def
/s {show} bind def

/Box {	% x y w h -> -			define box path
  /d_h exch def /d_w exch def /d_y exch def /d_x exch def
  d_x d_y  moveto
  d_w 0 rlineto
  0 d_h rlineto
  d_w neg 0 rlineto
  closepath
} def

/bgs {	% x y height blskip gray str -> -	show string with bg color
  /str exch def
  /gray exch def
  /blskip exch def
  /height exch def
  /y exch def
  /x exch def

  gsave
    x y blskip sub str stringwidth pop height Box
    gray setgray
    fill
  grestore
  x y M str s
} def

/bgcs { % x y height blskip red green blue str -> -  show string with bg color
  /str exch def
  /blue exch def
  /green exch def
  /red exch def
  /blskip exch def
  /height exch def
  /y exch def
  /x exch def

  gsave
    x y blskip sub str stringwidth pop height Box
    red green blue setrgbcolor
    fill
  grestore
  x y M str s
} def

% Highlight bars.
/highlight_bars {	% nlines lineheight output_y_margin gray -> -
  gsave
    setgray
    /ymarg exch def
    /lineheight exch def
    /nlines exch def

    % This 2 is just a magic number to sync highlight lines to text.
    0 d_header_y ymarg sub 2 sub translate

    /cw d_output_w cols div def
    /nrows d_output_h ymarg 2 mul sub lineheight div cvi def

    % for each column
    0 1 cols 1 sub {
      cw mul /xp exch def

      % for each rows
      0 1 nrows 1 sub {
        /rn exch def
        rn lineheight mul neg /yp exch def
        rn nlines idiv 2 mod 0 eq {
	  % Draw highlight bar.  4 is just a magic indentation.
	  xp 4 add yp cw 8 sub lineheight neg Box fill
	} if
      } for
    } for

  grestore
} def

% Line highlight bar.
/line_highlight {	% x y width height gray -> -
  gsave
    /gray exch def
    Box gray setgray fill
  grestore
} def

% Column separator lines.
/column_lines {
  gsave
    .1 setlinewidth
    0 d_footer_h translate
    /cw d_output_w cols div def
    1 1 cols 1 sub {
      cw mul 0 moveto
      0 d_output_h rlineto stroke
    } for
  grestore
} def

% Column borders.
/column_borders {
  gsave
    .1 setlinewidth
    0 d_footer_h moveto
    0 d_output_h rlineto
    d_output_w 0 rlineto
    0 d_output_h neg rlineto
    closepath stroke
  grestore
} def

% Do the actual underlay drawing
/draw_underlay {
  ul_style 0 eq {
    ul_str true charpath stroke
  } {
    ul_str show
  } ifelse
} def

% Underlay
/underlay {	% - -> -
  gsave
    0 d_page_h translate
    d_page_h neg d_page_w atan rotate

    ul_gray setgray
    ul_font setfont
    /dw d_page_h dup mul d_page_w dup mul add sqrt def
    ul_str stringwidth pop dw exch sub 2 div ul_h_ptsize -2 div moveto
    draw_underlay
  grestore
} def

/user_underlay {	% - -> -
  gsave
    ul_x ul_y translate
    ul_angle rotate
    ul_gray setgray
    ul_font setfont
    0 0 ul_h_ptsize 2 div sub moveto
    draw_underlay
  grestore
} def

% Page prefeed
/page_prefeed {		% bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} def

% Wrapped line markers
/wrapped_line_mark {	% x y charwith charheight type -> -
  /type exch def
  /h exch def
  /w exch def
  /y exch def
  /x exch def

  type 2 eq {
    % Black boxes (like TeX does)
    gsave
      0 setlinewidth
      x w 4 div add y M
      0 h rlineto w 2 div 0 rlineto 0 h neg rlineto
      closepath fill
    grestore
  } {
    type 3 eq {
      % Small arrows
      gsave
        .2 setlinewidth
        x w 2 div add y h 2 div add M
        w 4 div 0 rlineto
        x w 4 div add y lineto stroke

        x w 4 div add w 8 div add y h 4 div add M
        x w 4 div add y lineto
	w 4 div h 8 div rlineto stroke
      grestore
    } {
      % do nothing
    } ifelse
  } ifelse
} def

% EPSF import.

/BeginEPSF {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack
  userdict begin
  /showpage { } def
  0 setgray 0 setlinecap
  1 setlinewidth 0 setlinejoin
  10 setmiterlimit [ ] 0 setdash newpath
  /languagelevel where {
    pop languagelevel
    1 ne {
      false setstrokeadjust false setoverprint
    } if
  } if
} bind def

/EndEPSF {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse
%%EndResource
%%BeginResource: procset Enscript-Encoding-88591 1.6 4
/encoding_vector [
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/space        	/exclam       	/quotedbl     	/numbersign   	
/dollar       	/percent      	/ampersand    	/quoteright   	
/parenleft    	/parenright   	/asterisk     	/plus         	
/comma        	/hyphen       	/period       	/slash        	
/zero         	/one          	/two          	/three        	
/four         	/five         	/six          	/seven        	
/eight        	/nine         	/colon        	/semicolon    	
/less         	/equal        	/greater      	/question     	
/at           	/A            	/B            	/C            	
/D            	/E            	/F            	/G            	
/H            	/I            	/J            	/K            	
/L            	/M            	/N            	/O            	
/P            	/Q            	/R            	/S            	
/T            	/U            	/V            	/W            	
/X            	/Y            	/Z            	/bracketleft  	
/backslash    	/bracketright 	/asciicircum  	/underscore   	
/quoteleft    	/a            	/b            	/c            	
/d            	/e            	/f            	/g            	
/h            	/i            	/j            	/k            	
/l            	/m            	/n            	/o            	
/p            	/q            	/r            	/s            	
/t            	/u            	/v            	/w            	
/x            	/y            	/z            	/braceleft    	
/bar          	/braceright   	/tilde        	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/space        	/exclamdown   	/cent         	/sterling     	
/currency     	/yen          	/brokenbar    	/section      	
/dieresis     	/copyright    	/ordfeminine  	/guillemotleft	
/logicalnot   	/hyphen       	/registered   	/macron       	
/degree       	/plusminus    	/twosuperior  	/threesuperior	
/acute        	/mu           	/paragraph    	/bullet       	
/cedilla      	/onesuperior  	/ordmasculine 	/guillemotright	
/onequarter   	/onehalf      	/threequarters	/questiondown 	
/Agrave       	/Aacute       	/Acircumflex  	/Atilde       	
/Adieresis    	/Aring        	/AE           	/Ccedilla     	
/Egrave       	/Eacute       	/Ecircumflex  	/Edieresis    	
/Igrave       	/Iacute       	/Icircumflex  	/Idieresis    	
/Eth          	/Ntilde       	/Ograve       	/Oacute       	
/Ocircumflex  	/Otilde       	/Odieresis    	/multiply     	
/Oslash       	/Ugrave       	/Uacute       	/Ucircumflex  	
/Udieresis    	/Yacute       	/Thorn        	/germandbls   	
/agrave       	/aacute       	/acircumflex  	/atilde       	
/adieresis    	/aring        	/ae           	/ccedilla     	
/egrave       	/eacute       	/ecircumflex  	/edieresis    	
/igrave       	/iacute       	/icircumflex  	/idieresis    	
/eth          	/ntilde       	/ograve       	/oacute       	
/ocircumflex  	/otilde       	/odieresis    	/divide       	
/oslash       	/ugrave       	/uacute       	/ucircumflex  	
/udieresis    	/yacute       	/thorn        	/ydieresis    	
] def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Courier
/HFpt_w 10 def
/HFpt_h 10 def
/Courier-Bold /HF-gs-font MF
/HF /HF-gs-font findfont [HFpt_w 0 0 HFpt_h 0 0] makefont def
/Courier /F-gs-font MF
/F-gs-font 9 9 SF
/#copies 1 def
% Pagedevice definitions:
gs_languagelevel 1 gt {
  <<
    /PageSize [612 792] 
  >> setpagedevice
} if
%%BeginResource: procset Enscript-Header-simple 1.6 4

/do_header {	% print default simple header
  gsave
    d_header_x d_header_y HFpt_h 3 div add translate

    HF setfont
    user_header_p {
      5 0 moveto user_header_left_str show

      d_header_w user_header_center_str stringwidth pop sub 2 div
      0 moveto user_header_center_str show

      d_header_w user_header_right_str stringwidth pop sub 5 sub
      0 moveto user_header_right_str show
    } {
      5 0 moveto fname show
      45 0 rmoveto fmodstr show
      45 0 rmoveto pagenumstr show
    } ifelse

  grestore
} def
%%EndResource
/d_page_w 576 def
/d_page_h 720 def
/d_header_x 0 def
/d_header_y 705 def
/d_header_w 576 def
/d_header_h 15 def
/d_footer_x 0 def
/d_footer_y 0 def
/d_footer_w 576 def
/d_footer_h 0 def
/d_output_w 576 def
/d_output_h 705 def
/cols 1 def
%%EndSetup
%%Page: (1) 1
%%BeginPageSetup
_S
18 36 translate
/pagenum 1 def
/fname (emacskeyops.txt) def
/fdir () def
/ftail (emacskeyops.txt) def
% User defined strings:
/fmodstr (Wed Jan 13 15:05:21 2010) def
/pagenumstr (1) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 693 M
(COMMON EDITING TASKS AND THEIR EMACS KEYSTROKE COUNTERPARTS ) s
5 673 M
(REAL GEEKS:) s
5 663 M
(        1. Don't use mice unless they have to; they work faster with) s
5 653 M
(keystrokes. Below we supply the most common keystroke commands, which) s
5 643 M
(work for Unix, Linux, Emacs, and our configuration of IDL.) s
5 623 M
(        2. Interchange the "Caps Lock" and "Ctrl" keys, because the Ctrl) s
5 613 M
(key is used for many keystrokes and it needs easy access to forstall) s
5 603 M
(carpal tunnel problems. To do this, type "swapcaps" in any terminal; to) s
5 593 M
(change back, type "swapcaps" again.) s
5 573 M
(        3. Often don't want Emacs to open up a new window, but instead) s
5 563 M
(to use the current window. To accomplish this, type "emacs -nw) s
5 553 M
(filename". ) s
5 533 M
(---------------------- Keystroke Commands ------------------------) s
5 513 M
(The following are the most common editing tasks and their keystroke) s
5 503 M
(counterparts:) s
5 483 M
(IMPORTANT:) s
5 473 M
(ctrl-g: Returns to basic editing; escapes any Emacs questions or loops.) s
5 453 M
(CURSOR LOCATION CONTROL:) s
5 443 M
(arrow keys, "Page Up/Down", "Home", and "End" work as expected) s
5 433 M
(ctrl-e: move cursor to the end of the line) s
5 423 M
(ctrl-a: move cursor to the beginning of the line) s
5 413 M
(ctrl-x g: move cursor o line number XX; XX is prompted for.) s
5 393 M
(DELETING LINE-BY-LINE \(CUTTING\)) s
5 383 M
(ctrl-k \(twice per line: once for text, once for carriage return\)) s
5 363 M
(RESTORING THE DELETED LINES \(PASTING\)) s
5 353 M
(move the cursor to where you want to restore the line\(s\) and type) s
5 343 M
(ctrl-y) s
5 323 M
(MOVING OR DELETING BLOCKS OF TEXT: Three steps: ) s
5 303 M
(First you need to mark \(HIGHLIGHT\) the block of text.  Set the beginning) s
5 293 M
(\(or ending\) mark with) s
5 283 M
(ctrl-space) s
5 273 M
(Use the arrows to highlight the block. ) s
5 253 M
(Second you delete the text \(CUT it\)) s
5 243 M
(ctrl-w) s
5 223 M
(Third you move the cursor to where you want to insert the text \(PASTE it\)) s
5 213 M
(ctrl-y) s
5 193 M
(If you screwed up and want to stop:) s
5 183 M
(ctrl-g) s
5 163 M
(UNDO: ) s
5 153 M
(ctrl-/: undoes what you did. You can keep undoing by repeating ctrl-/.) s
5 133 M
(CONVERT TO UPPER CASE: alt-u or esc-u: You can hold the alt key down and) s
5 123 M
(keep punching u and it will keep going; esc-u does it only once.) s
5 103 M
(CONVERT TO lower CASE: alt-l or esc-l) s
5 83 M
(Capitalizing First Letter: alt-c) s
5 63 M
(FILL: ) s
5 53 M
(You've modified the text, the text looks awful, you want it nicely) s
5 43 M
(formatted. Works only on a paragraph-by-paragraph basis: esc-q or alt-q) s
5 23 M
(SEARCHING:) s
5 13 M
(Generally, ctrl-s searches forwards and ctrl-r searches backwards) s
_R
S
%%Page: (2) 2
%%BeginPageSetup
_S
18 36 translate
/pagenum 2 def
/fname (emacskeyops.txt) def
/fdir () def
/ftail (emacskeyops.txt) def
% User defined strings:
/fmodstr (Wed Jan 13 15:05:21 2010) def
/pagenumstr (2) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 693 M
(ctrl-s ctrl-w: word search. Forward searches for the exact match to what you) s
5 683 M
(type. Can be repeated simply by typing ctrl-s \(replace ctrl-s by ctrl-r) s
5 673 M
(to search backwards\)) s
5 653 M
(ctrl-s: incremental search \(searches character-by-character as you type\).) s
5 643 M
(Can be repeated simply by typing ctrl-s.) s
5 623 M
(ctrl-s enter: simple search. Cannot be repeated.) s
5 613 M
(ctrl-s enter ctrl-w: simple word search. Cannot be repeated.) s
5 593 M
(if you screwed up and want to stop: ) s
5 583 M
(ctrl-g) s
5 563 M
(SEARCH AND REPLACE WITH QUERY: ) s
5 553 M
(F9. Asks for the search string on the bottom line of the screen. Hit) s
5 543 M
(enter after the string. For each find, type 'y' to replace, 'n' to not) s
5 533 M
(replace. To terminage, type ctrl-g.) s
5 513 M
(if you screwed up and want to stop:) s
5 503 M
(ctrl-g) s
5 483 M
(WRITE THE FILE TO DISK \(We suggest that you do this frequently!\):) s
5 473 M
(ctrl-s) s
5 453 M
(EXITING EMACS) s
5 443 M
(ctrl-x ctrl-c) s
5 423 M
(CHANGE FONT SIZE: shift - left mouse button) s
5 403 M
(-----------advanced---------------) s
5 383 M
(DEFINE A KEYBOARD MACRO:) s
5 373 M
(You can dedfine a macro: a combination of sequential keystrokes that you) s
5 363 M
(want to execute repeatedly. To define the macro:) s
5 343 M
(ctrl-x \(: defines the beginning of a macro. After typing this, type the) s
5 333 M
(sequential keystrokes you want to execute. Aafter the last keystroke,) s
5 323 M
(type  ) s
5 303 M
(ctrl-x \) to end. ) s
5 283 M
(To execute the macro once, type) s
5 273 M
(ctrl-x e ) s
5 253 M
(To execute the macro N types:) s
5 243 M
(Esc N) s
5 233 M
(ctrl-x e) s
5 213 M
(ISPELL:A MARKED REGION) s
5 203 M
(ctrl-x $) s
5 183 M
(COUNT NR OF WORDS IN A MARKED REGION) s
5 173 M
(ctrl-x w) s
5 153 M
(DO EMACS WITHOUT IN CURRENT TERMINAL--NO NEW X WINDOW) s
5 143 M
(emacs -nw filename  ...or...  mem filename) s
5 123 M
(-------------------------------------------------------------------) s
5 113 M
(To use Carl's emacs setup you need to replace your .emacs file with his:) s
5 93 M
(1.      from the UNIX prompt in your home directory, rename your.emacs) s
5 83 M
(file so you can retrieve it again if necessary:) s
5 73 M
(        mv .emacs .emacs_original) s
5 53 M
(2.      then copy Carl's file to yours:) s
5 43 M
(        cp ~heiles/.emacs . or get it from the website.) s
_R
S
%%Trailer
%%Pages: 2
%%DocumentNeededResources: font Courier-Bold Courier 
%%EOF
